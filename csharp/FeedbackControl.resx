<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="openFileDialogDisplay.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <data name="textBoxHelp.Text" xml:space="preserve">
    <value>On a graphical display the text format can be modified by special escape sequences.
It supports a subset of the ANSI ESC commands traditionally used on terminal text displays. 
(See also http://academic.evergreen.edu/projec...sc.htm#display)
	
Default Settings
----------------

The device restores its default settings during its startup sequence. 
Any format change will remain persistent for all following display 
messages messages. To force a reset to the defaults there is the 
following special command:
	
"\x1b[0m"
	
Default Settings:

Feature                               | Setting
--------------------------------------|---------------------------------
Text box transparent mode             | semi-transparent
Text box transparent mode gamma value | RgbPixel(65, 65, 65)
Text foreground mode                  | Color  
Text background mode                  | Transparent
Text color                            | RgbPixel(255,255,255) -&gt; white
Text background color                 | RgbPixel(0,0,0) -&gt; black

Test Box Modes
--------------
	
__Transparent__

The text box is transparent. The text color remains as defined. Setting the background color has no effect.

Mode:

	"\x1b[112;300m"

Color:

	-

__Color__

The text box uses the the defined background color.
	
Mode:

"\x1b[112;301m"
Color:

"\x1b[113;r&lt;0-255&gt;;g&lt;0-255&gt;;b&lt;0-255&gt;m"

__Semi-transparent__

The text box is semi-transparent. The gamma  value used defines the amount of transparency.
	
Mode: 

"\x1b[112;302m"

Gamma:

"\x1b[113;r&lt;0-255&gt;;g&lt;0-255&gt;;b&lt;0-255&gt;m"

__Image Transparent__

The full image is semi-transparent rather than only a small text box. The respective gama value is used.
	
Mode:

"\x1b[112;303m"

Gamma:

"\x1b[113;r&lt;0-255&gt;;g&lt;0-255&gt;;b&lt;0-255&gt;m"

Text Foreground Mode
-------------------

__Transparent__

The text is displayed transparent.

"\x1b[110;300m"

__Color__

The text is displayed with the current text color.

"\x1b[110;301m"

Text Background Mode
--------------------

__Transparent__

The background is transparent

"\x1b[112;300m"

__Color__

The background uses the current text color.

"\x1b[112;301m"

Text Color
----------

"\x1b[30m" // black
"\x1b[31m" // red
"\x1b[32m" // green
"\x1b[33m" // yellow
"\x1b[34m" // blue
"\x1b[35m" // magenta
"\x1b[36m" // cyan
"\x1b[37m" // white
"\x1b[38;r&lt;0-255&gt;;g&lt;0-255&gt;;b&lt;0-255&gt;m" // RGB

Text Background Color
---------------------

"\x1b[40m" // black
"\x1b[41m" // red
"\x1b[42m" // green
"\x1b[43m" // yellow
"\x1b[44m" // blue
"\x1b[45m" // magenta
"\x1b[46m" // cyan
"\x1b[47m" // white
"\x1b[48;r&lt;0-255&gt;;g&lt;0-255&gt;;b&lt;0-255&gt;m" // RGB</value>
  </data>
</root>